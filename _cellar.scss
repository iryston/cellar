/*! Cellar | MIT License | @iryston */

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// SETTINGS
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

$clr-namespace:              'row' !default;      // Prefix namespace for row layout and columns
$clr-element-name:           'col' !default;      // Element/column name
$clr-element-class-chain:    '__' !default;       // Chain characters between block and element
$clr-modifier-class-chain:   '_' !default;        // Chain characters between block and modifier
$clr-breakpoint-class-chain: '_' !default;        // Chain characters between width and breakpoint
$clr-width-class-chain:      '_' !default;        // Prefix Chain characters between element and width
$clr-gutter:                 20px !default;       // Gutter between columns
$clr-width-class-style:      'fraction' !default; // Width class naming. Can be 'fraction', 'percentage' or 'fragment'
$clr-widths: (
  2,
  3,
  4,
  5,
  6,
  10
) !default; // Width denominator values. 2 = 1/2, 3 = 1/3 etc. Add/remove as appropriate

$clr-enable-responsive:  true !default;
$clr-breakpoints:  (
  "sm":       "screen and (min-width: 576px)",
  "md":       "screen and (min-width: 768px)",
  "lg":       "screen and (min-width: 992px)",
  "xl":       "screen and (min-width: 1200px)"
) !default; // Responsive breakpoints. Add/remove as appropriate

// Enable/disable layouts
$clr-enable-center:         false !default;
$clr-enable-column-center:  false !default;
$clr-enable-right:          false !default;
$clr-enable-middle:         false !default;
$clr-enable-bottom:         false !default;
$clr-enable-flush:          false !default;
$clr-enable-tiny:           false !default;
$clr-enable-small:          false !default;
$clr-enable-large:          false !default;
$clr-enable-huge:           false !default;
$clr-enable-auto:           false !default;
$clr-enable-rev:            false !default;

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// LOGIC aka THE MAGIC
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

@function escape-numerator($numerator, $namespace: '') {
  @if ($namespace == '') {
    $numerator-as-string: inspect($numerator);
    $escaped-numerator: '';

    // Loop through all digits in the numerator and escape individually
    @for $i from 1 through str-length($numerator-as-string) {
      $digit: str-slice($numerator-as-string, $i, $i);
      $escaped-numerator: $escaped-numerator+\3+$digit;
    }

    @return $escaped-numerator;
  }

  @else {
    @return $numerator;
  }
}

@function clr-create-width-class-name($style, $numerator, $denominator, $breakpoint-alias) {

  $class-name: null;

  @if $style == 'fraction' or $style == 'fragment' {
    // Set delimiter as slash or text
    $delimiter: if($style == 'fraction', \/, -of-);
    $class-name: #{$clr-namespace}#{$clr-element-class-chain}#{$clr-element-name}#{$clr-width-class-chain}#{escape-numerator($numerator, $clr-width-class-chain)}#{$delimiter}#{$denominator}#{$breakpoint-alias};
  }

  @else {
    @if $clr-width-class-chain == '' {
      @error "Percentage value class names require a chain characters to be set (see $clr-width-class-chain). Selective escaping (e.g. the 5 of 50) cannot be done.";
    }
    $class-width: floor(($numerator / $denominator) * 100);
    $class-name: #{$clr-namespace}#{$clr-element-class-chain}#{$clr-element-name}#{$clr-width-class-chain}#{$class-width}#{$breakpoint-alias};
  }

  @return $class-name;
}

@function uiCreateBlockClassName($modifier: '') {
  @if $modifier == '' {
    @return #{$clr-namespace};
  }

  @return #{$clr-namespace}#{$clr-modifier-class-chain}#{$modifier};
}

@function uiCreateElementClassName($modifier: '') {
  @if $modifier == '' {
    @return #{$clr-namespace}#{$clr-element-class-chain}#{$clr-element-name};
  }

  @return #{$clr-namespace}#{$clr-element-class-chain}#{$clr-element-name}#{$clr-modifier-class-chain}#{$modifier};
}

@mixin clr-create-widths($widths, $breakpoint-alias: null) {

  // Initialise an empty utility map that will eventually contain all our classes
  $pseudo-class-map: ();

  // Loop widths
  @each $denominator in $widths {

    // If 1=1, 2=2, 3=3; @for will skip over so create 1/1 class manually
    @if ($denominator == 1) {

      // Create 1/1 class
      $class-name: clr-create-width-class-name($clr-width-class-style, 1, 1, $breakpoint-alias);

      .#{$class-name} {
        width: 100%;
      }
    }

    @else {

      // Loop widths as fractions
      @for $numerator from 1 to $denominator {

        // Create class name and set width value
        $class-name: clr-create-width-class-name($clr-width-class-style, $numerator, $denominator, $breakpoint-alias);
        $width-value: percentage($numerator / $denominator);

        // Is this width already in our utility map?
        $duplicate: map-get($pseudo-class-map, $width-value);

        // Create width class
        .#{$class-name} {

          // If this width is in utility map, @extend the duplicate, else create a new one
          @if $duplicate {
            @extend .#{$duplicate};
          }

          @else {
            width: $width-value;
          }
        }

        // Add this class to utility map
        $add-class: ($width-value: $class-name);
        $pseudo-class-map: map-merge($pseudo-class-map, $add-class);
      }
    }
  }
}

@mixin clr-mq($alias) {

  // Search breakpoint map for alias
  $query: map-get($clr-breakpoints, $alias);

  // If alias exists, print out media query
  @if $query {
    @media #{$query} {
      @content;
    }
  }

  @else {
    @error "No breakpoint found for #{$alias}";
  }
}

/**
 * GRID LAYOUT
 */

 .#{uiCreateBlockClassName()} {
  display: block;
  list-style: none;
  padding: 0;
  margin: 0;
  margin-left: -($clr-gutter);
  font-size: 0;
}

.#{uiCreateElementClassName()} {
  box-sizing: border-box;
  display: inline-block;
  width: 100%;
  padding: 0;
  padding-left: $clr-gutter;
  margin: 0;
  vertical-align: top;
  font-size: 1rem;
}

@if $clr-enable-center {
  .#{uiCreateBlockClassName('center')} {
    text-align: center;

    > .#{uiCreateElementClassName()} {
      text-align: left;
    }
  }
}

@if $clr-enable-column-center {
  .#{uiCreateElementClassName('center')} {
    display: block;
    margin: 0 auto;
  }
}

@if $clr-enable-right {
  .#{uiCreateBlockClassName('right')} {
    text-align: right;

    > .#{uiCreateElementClassName()} {
      text-align: left;
    }
  }
}

@if $clr-enable-middle {
  .#{uiCreateBlockClassName('middle')} {
    > .#{uiCreateElementClassName()} {
      vertical-align: middle;
    }
  }
}

@if $clr-enable-bottom {
  .#{uiCreateBlockClassName('bottom')} {
    > .#{uiCreateElementClassName()} {
      vertical-align: bottom;
    }
  }
}

@if $clr-enable-flush {
  .#{uiCreateBlockClassName('flush')} {
    margin-left: 0;

    > .#{uiCreateElementClassName()} {
      padding-left: 0;
    }
  }
}

@if $clr-enable-tiny {
  .#{uiCreateBlockClassName('tiny')} {
    margin-left: -($clr-gutter / 4);

    > .#{uiCreateElementClassName()} {
      padding-left: ($clr-gutter / 4);
    }
  }
}

@if $clr-enable-small {
  .#{uiCreateBlockClassName('small')} {
    margin-left: -($clr-gutter / 2);

    > .#{uiCreateElementClassName()} {
      padding-left: ($clr-gutter / 2);
    }
  }
}

@if $clr-enable-large {
  .#{uiCreateBlockClassName('large')} {
    margin-left: -($clr-gutter * 2);

    > .#{uiCreateElementClassName()} {
      padding-left: ($clr-gutter * 2);
    }
  }
}

@if $clr-enable-huge {
  .#{uiCreateBlockClassName('huge')} {
    margin-left: -($clr-gutter * 4);

    > .#{uiCreateElementClassName()} {
      padding-left: ($clr-gutter * 4);
    }
  }
}

@if $clr-enable-auto {
  .#{uiCreateBlockClassName('auto')} {
    > .#{uiCreateElementClassName()} {
      width: auto;
    }
  }
}

@if $clr-enable-rev {
  .#{uiCreateBlockClassName('rev')} {
    direction: rtl;

    > .#{uiCreateElementClassName()} {
      direction: ltr;
    }
  }
}

/**
 * GRID WIDTHS
 */

// Loop default widths
@include clr-create-widths($clr-widths);

// If responsive flag enabled, loop breakpoint widths
@if $clr-enable-responsive {
  @each $alias, $query in $clr-breakpoints {

    // Create each media query
    @media #{$query} {
      @include clr-create-widths($clr-widths, #{$clr-breakpoint-class-chain}#{$alias});
    }
  }
}
